name: pr-merged
on:
  workflow_call:
    inputs:
      HELM_BRANCH:
        required: false
        type: string
        default: release
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      COMPONENT_NAME:
        required: true
        type: string
      GO_VERSION:
        required: true
        type: string
      GO111MODULE:
        required: false
        type: string
      CGO_ENABLED:
        required: false
        type: number
        default: 1
      BUILD_PLATFORM:
        required: false
        type: string
        default: "linux/amd64"
        description: 'docker build platforms'
      REQUIRED_TESTS:
        required: true
        type: string
        description: 'tests to run'  
      COSIGN:
        required: false
        default: false
        type: boolean
        description: 'run cosign on released image'
      TRIGGER_HELM_CICD:
        required: false
        default: true
        type: boolean
      HELM_E2E_TEST:
        required: false
        default: false
        type: boolean
      SYSTEM_TESTS_BRANCH:
        required: false
        default: master
        type: string
        description: 'system tests branch'

jobs:
  docker-build:
    if: ${{ (contains(github.event.pull_request.labels.*.name, 'release') || contains( github.event.pull_request.labels.*.name, 'trigger-integration-test')) && github.repository_owner == 'kubescape' }}  
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG_PRERELEASE: ${{ steps.image-prerelease-tag.outputs.IMAGE_TAG_PRERELEASE }}
      TEST_NAMES: ${{ steps.export_tests_to_env.outputs.TEST_NAMES }}
    permissions:
      id-token: write
      packages: write
      contents: read    
      pull-requests: read  

    steps:

      # - name: Exit if not on master branch
      #   if: github.ref == 'master'
      #   run: exit -1

      - uses: actions/checkout@v3
        name: Checkout
        with:
          fetch-depth: 0
        #   submodules: recursive

      - uses: actions/setup-go@v4
        name: Installing go
        with:
          go-version: '${{ inputs.GO_VERSION }}'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set prerelease image tag
        id: image-prerelease-tag
        run: echo "IMAGE_TAG_PRERELEASE=${{ inputs.IMAGE_TAG }}-prerelease" >> $GITHUB_OUTPUT

      - name: Run unit test
        id: unit-test
        run: go test -v ./...
      
      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAYIO_REGISTRY_USERNAME }}
          password: ${{ secrets.QUAYIO_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: build/Dockerfile
          tags: ${{ inputs.IMAGE_NAME }}:${{ steps.image-prerelease-tag.outputs.IMAGE_TAG_PRERELEASE }}
          build-args: image_version=${{ steps.image-prerelease-tag.outputs.IMAGE_TAG }}
          platforms: ${{ inputs.BUILD_PLATFORM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      - name: Install cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.12.0'

      - name: sign kubescape container image
        if: ${{ inputs.COSIGN }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
            cosign sign --force ${{ inputs.IMAGE_NAME }}:${{ steps.image-prerelease-tag.outputs.IMAGE_TAG_PRERELEASE }}

      - id: export_tests_to_env
        name: set test name
        run: |
          echo "TEST_NAMES=$input" >> $GITHUB_OUTPUT
        env:
          input: ${{ inputs.REQUIRED_TESTS }}

  run-tests:
    strategy:
      fail-fast: false    
      matrix:
        TEST: ${{ fromJson(needs.docker-build.outputs.TEST_NAMES) }}
    needs: docker-build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout systests repo
        uses: actions/checkout@v3
        with:
          repository: armosec/system-tests
          ref: ${{ inputs.SYSTEM_TESTS_BRANCH }}
          path: .

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.13'
          cache: 'pip' 

      - name: create env
        run: ./create_env.sh

      - name: Generate uuid
        id: uuid
        run: |
          echo "RANDOM_UUID=systets-$(uuidgen)" >> $GITHUB_OUTPUT

      - name: Create k8s Kind Cluster
        id: kind-cluster-install
        uses: helm/kind-action@v1.3.0
        with:
          cluster_name: ${{ steps.uuid.outputs.RANDOM_UUID }}
          # kubectl_version: v1.23.12
      
      - name: run-tests
        env:
          CUSTOMER: ${{ secrets.CUSTOMER }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID_PROD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          echo "Test history:"
          echo " ${{ matrix.TEST }} " >/tmp/testhistory
          cat /tmp/testhistory
          source systests_python_env/bin/activate

          python3 systest-cli.py                              \
            -t ${{ matrix.TEST }}                             \
            -b production                                     \
            -c CyberArmorTests                                \
            --logger DEBUG                                    \
            --kwargs helm_branch=${{ inputs.HELM_BRANCH }}    \
            ${{ inputs.COMPONENT_NAME }}-tag=${{ needs.docker-build.outputs.IMAGE_TAG_PRERELEASE }}

          deactivate

      - name: Test Report
        uses: mikepenz/action-junit-report@v3.6.1
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/results_xml_format/**.xml'          


  create-release-and-retag:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release') && always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) && !(contains (needs.*.result,'cancelled')) }}
    name: Docker retag and create release
    needs: [run-tests, docker-build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: ubuntu-latest  

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAYIO_REGISTRY_USERNAME }}
          password: ${{ secrets.QUAYIO_REGISTRY_PASSWORD }}

      - name: Docker retag
        run: |
          curl -L https://github.com/regclient/regclient/releases/download/v0.4.4/regctl-linux-amd64 >regctl
          chmod 755 regctl

          if [ ${{ inputs.COSIGN }} = true ]; then
            ./regctl image copy ${{ inputs.IMAGE_NAME }}:${{ needs.docker-build.outputs.IMAGE_TAG_PRERELEASE }} ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }} --digest-tags
            ./regctl image copy ${{ inputs.IMAGE_NAME }}:${{ needs.docker-build.outputs.IMAGE_TAG_PRERELEASE }} ${{ inputs.IMAGE_NAME }}:latest --digest-tags      
          else
            ./regctl image copy ${{ inputs.IMAGE_NAME }}:${{ needs.docker-build.outputs.IMAGE_TAG_PRERELEASE }} ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
            ./regctl image copy ${{ inputs.IMAGE_NAME }}:${{ needs.docker-build.outputs.IMAGE_TAG_PRERELEASE }} ${{ inputs.IMAGE_NAME }}:latest
          fi

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.11.1
        with:
          token:  ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ inputs.IMAGE_TAG }}
          name: Release ${{ inputs.IMAGE_TAG }}
          draft: false
          prerelease: false
          body: ${{ github.event.pull_request.body }}


      - name: Trigger helm chart workflow
        if: ${{ inputs.TRIGGER_HELM_CICD == true }}
        uses: benc-uk/workflow-dispatch@v1.2.2
        with:
          workflow: 00-cicd.yaml
          repo: kubescape/helm-charts
          ref: dev
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          inputs: '{"IMAGE_TAG":"${{ inputs.IMAGE_TAG }}","COMPONENT_NAME":"${{ inputs.COMPONENT_NAME }}","HELM_E2E_TEST":"${{ inputs.HELM_E2E_TEST }}","CHANGE_TAG":"true"}'
          