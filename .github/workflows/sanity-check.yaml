name: system-sanity-check

  # Controls when the workflow will run
on:
  # Triggers the workflow every 5 minutes
  # schedule:
  #   - cron: "*/30 * * * *"
 
  workflow_call:
      inputs:
        SYSTEM_TESTS_BRANCH:
          type: string
          default: "master"
        BINARY_TESTS:
          type: string
          default: '[ "scan_nsa", 
                      "scan_mitre", 
                      "scan_with_exceptions", 
                      "scan_repository", 
                      "scan_local_file", 
                      "scan_local_glob_files", 
                      "scan_local_list_of_files", 
                      "scan_nsa_and_submit_to_backend", 
                      "scan_mitre_and_submit_to_backend", 
                      "scan_local_repository_and_submit_to_backend", 
                      "scan_repository_from_url_and_submit_to_backend", 
                      "scan_with_exception_to_backend", 
                      "scan_with_custom_framework", 
                      "scan_customer_configuration", 
                      "host_scanner"
                    ]'
jobs:
  wf-preparation:
    name: secret-validator
    runs-on: ubuntu-latest
    outputs:
      TEST_NAMES: ${{ steps.export_tests_to_env.outputs.TEST_NAMES }}
      is-secret-set: ${{ steps.check-secret-set.outputs.is-secret-set }}
    steps:
      - name: check if the necessary secrets are set in github secrets
        id: check-secret-set
        env:
          CUSTOMER: ${{ secrets.CUSTOMER }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLIENT_ID: ${{ secrets.CLIENT_ID_PROD }}
          SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: "echo \"is-secret-set=${{ env.CUSTOMER != '' && \n                        env.USERNAME != '' &&\n                        env.PASSWORD != '' &&\n                        env.CLIENT_ID != '' &&\n                        env.SECRET_KEY != '' &&\n                        env.REGISTRY_USERNAME != '' &&\n                        env.REGISTRY_PASSWORD != ''\n                      }}\" >> $GITHUB_OUTPUT\n"

      - id: export_tests_to_env
        name: set test name
        run: |
          echo "TEST_NAMES=$input" >> $GITHUB_OUTPUT
        env:
          input: ${{ inputs.BINARY_TESTS }}

  run-tests:
      strategy:
        fail-fast: false    
        matrix:
          TEST: ${{ fromJson(needs.wf-preparation.outputs.TEST_NAMES) }}
      needs: wf-preparation
      runs-on: ubuntu-large
      steps:

        - name: Checkout systests repo
          uses: actions/checkout@v3
          with:
            repository: armosec/system-tests
            path: .
            ref: ${{ inputs.SYSTEM_TESTS_BRANCH }}

        - uses: actions/setup-python@v4
          with:
            python-version: '3.8.13'
            cache: 'pip' 

        - name: create env
          run: ./create_env.sh

        - name: Generate uuid
          id: uuid
          run: |
            echo "RANDOM_UUID=systets-$(uuidgen)" >> $GITHUB_OUTPUT
        - name: Create k8s Kind Cluster
          id: kind-cluster-install
          uses: helm/kind-action@v1.3.0
          with:
            cluster_name: ${{ steps.uuid.outputs.RANDOM_UUID }}
            # kubectl_version: v1.23.12
            # verbosity:

        - name: run-tests
          env:
            CUSTOMER: ${{ secrets.CUSTOMER }}
            USERNAME: ${{ secrets.USERNAME }}
            PASSWORD: ${{ secrets.PASSWORD }}
            CLIENT_ID: ${{ secrets.CLIENT_ID_PROD }}
            SECRET_KEY: ${{ secrets.SECRET_KEY_PROD }}
            REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
            REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          run: |
            echo "Test history:"
            echo " ${{ matrix.TEST }} " >/tmp/testhistory
            cat /tmp/testhistory
            source systests_python_env/bin/activate
            python3 systest-cli.py             \
              -t ${{ matrix.TEST }}            \
              -b production                    \
              -c CyberArmorTests               \
              --logger DEBUG                   \
              --kwargs helm_branch=release     \
            deactivate

        - name: Test Report
          uses: mikepenz/action-junit-report@v3.6.1
          if: always() # always run even if the previous step fails
          with:
            report_paths: '**/results_xml_format/**.xml'       
