name: Basic-Go-Testing

on:
  workflow_call:
    inputs:
      GO_VERSION:
        required: true
        type: string
      GO111MODULE:
        required: false
        type: string
      CGO_ENABLED:
        required: false
        type: number
        default: 1
      BUILD_PATH:
        required: false
        type: string
        default: "./..."
      UNIT_TESTS_PATH:
        required: false
        type: string
        default: "./..."

    secrets:
      SNYK_TOKEN:
        required: false
      GITGUARDIAN_API_KEY:
        required: false

jobs:
  Check-secret:
    name: check if secrets are set
    runs-on: ubuntu-latest
    outputs:
      run-gitgardian: ${{ steps.check-secret-set.outputs.is-gitgardian-set }}
      run-snyk: ${{ steps.check-secret-set.outputs.is-snyk-set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: check-secret-set
        env:
            GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
            echo "is-gitgardian-set=${{ env.GITGUARDIAN_API_KEY != '' }}" >> $GITHUB_OUTPUT
            echo "is-snyk-set=${{ env.SNYK_TOKEN != '' }}" >> $GITHUB_OUTPUT

  Environment-Test:
    name: Create cross-platform build
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CGO_ENABLED: ${{ inputs.CGO_ENABLED }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3
        with:
          submodules: recursive
  
      - uses: actions/setup-go@v3
        name: Setup Go 
        with:
          go-version: ${{ inputs.GO_VERSION }}
          cache: true

      - name: Test race conditions
        if: ${{ inputs.CGO_ENABLED }} == 1
        run: go test -v -race ${{ inputs.UNIT_TESTS_PATH }}

      - name: Test without race conditions
        if: ${{ inputs.CGO_ENABLED }} != 1
        run: go test -v ${{ inputs.UNIT_TESTS_PATH }}

      - name: Test go build  
        run: go build -v ${{ inputs.BUILD_PATH }}

  Basic-Test:
    env:
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CGO_ENABLED: ${{ inputs.CGO_ENABLED }}
    runs-on: ubuntu-latest
    needs: [Check-secret, Environment-Test]
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-go@v3
      name: Setup Go 
      with:
        go-version: ${{ inputs.GO_VERSION }}
        cache: true

    - name: Scanning - Forbidden Licenses (go-licenses)
      id: licenses-scan
      continue-on-error: true
      run: |
        echo "## Installing go-licenses tool"
        go install github.com/google/go-licenses@latest
        echo "## Scanning for forbiden licenses ##"
        go-licenses check .

    - name: Scanning - Credentials (GitGuardian)
      if: needs.check-secret.outputs.run-gitgardian == 'true'
      continue-on-error: true      
      id: credentials-scan
      uses: GitGuardian/ggshield/actions/secret@main        
      env:          
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}         
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}          
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}          
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}         
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

    - name: Scanning - Vulnerabilities (Snyk)
      if: needs.check-secret.outputs.run-snyk == 'true'
      id: vulnerabilities-scan
      continue-on-error: true
      uses: snyk/actions/golang@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Test go linting 
      continue-on-error: true  # TODO: Should be removed
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout 10m
        only-new-issues: true
      
    - name: Test coverage
      run: go test -v ${{ inputs.UNIT_TESTS_PATH }} -covermode=count -coverprofile=coverage.out

    - name: Convert coverage count to lcov format
      uses: jandelgado/gcov2lcov-action@v1
      
    - name: Submit coverage tests to Coveralls
      uses: coverallsapp/github-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: coverage.lcov

    - name: Comment results to PR
      uses: peter-evans/create-or-update-comment@v2
      continue-on-error: true # This step typically fails when opening PRs from forks 
      with:
        issue-number:  ${{ github.event.pull_request.number }}
        body: |
          Summary:
          - License scan: ${{ steps.licenses-scan.outcome }}
          - Credentials scan: ${{ steps.credentials-scan.outcome }}
          - Vulnerabilities scan: ${{ steps.vulnerabilities-scan.outcome }}
          - Unit test: ${{ steps.unit-test.outcome }}
          - Go build: ${{ steps.build.outcome }}
        reactions: 'eyes'

